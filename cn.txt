7A
#include<stdio.h>
#include<conio.h>
#include<string.h>
int main()
 {
 int a[20],b[30],i,j,k,count,n;
printf("enter frame length:");
scanf("%d",&n);
printf("enter input frame(0's&1's only):");
for(i=0;i<n;i++)
scanf("%d",&a[i]);
i=0;count=1;j=0; 
while(i<n)
{
 if(a[i]==1)
{
 b[j]=a[i];
 for(k=i+1;a[k]==1&&k<n&&count<5;k++)
{
 j++; b[j]=a[k]; 
 count++;
 if(count==5)
{
 j++;
 b[j]=0;
}
i=k;
}
} 
else {
 b[j]=a[i];
}
i++;
j++;
}
printf("After stuffing the frame is:");
for(i=0;i<j;i++)
printf("%d",b[i]);
getch();
}

7B
#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<process.h>
int main()
{
int i=0,j=0,n,pos; char a[20],b[50],ch;
printf("enter string:\n");
scanf("%s",a); 
n=strlen(a);
printf("enter position\n"); 
scanf("%d",&pos);
if(pos>n)
{ 
printf("invalid position,Enter again:");
scanf("%d",&pos);
}
printf("enter the character\n");
ch=getche();
b[0]='d';
b[1]='l';
b[2]='e'; 
b[3]='s'; 
b[4]='t'; 
b[5]='x';
j=6;
while(i<n)
{
if(i==pos-1) 
{
b[j]='d'; 
b[j+1]='l';
b[j+2]='e';
b[j+3]=ch;
b[j+4]='d';
b[j+5]='l';
b[j+6]='e';
j=j+7; 
}
if(a[i]=='d'&&a[i+1]=='l'&& a[i+2]=='e')
{
b[j]='d';
b[j+1]='l';
b[j+2]='e';
j=j+3; 
} 
b[j]=a[i];
i++;
j++; 
}
b[j]='d';
b[j+1]='l';
b[j+2]='e';
b[j+3]='e';
b[j+4]='t';
b[j+5]='x';
b[j+6]='\0';
printf("\n frame after stuffing: \n");
printf("%s",b);
getch();
}

8
#include<stdio.h>
struct node
{
 unsigned dist[20];
 unsigned from[20];
}rt[10];
int main()
{
 int costmat[20][20];
 int nodes,i,j,k,count=0;
 printf("\nEnter the number of nodes : ");
 scanf("%d",&nodes);//Enter the nodes
 printf("\nEnter the cost matrix :\n");
 for(i=0;i<nodes;i++)
 {
 for(j=0;j<nodes;j++)
 {
 scanf("%d",&costmat[i][j]);
 costmat[i][i]=0;
 rt[i].dist[j]=costmat[i][j];
 rt[i].from[j]=j;
 }
 }
 do
 {
 count=0;
 for(i=0;i<nodes;i++)

 
 for(j=0;j<nodes;j++)
 for(k=0;k<nodes;k++)
 if(rt[i].dist[j]>costmat[i][k]+rt[k].dist[j])
 {
 rt[i].dist[j]=rt[i].dist[k]+rt[k].dist[j];
rt[i].from[j]=k;
count++;
 }
 }while(count!=0);
 for(i=0;i<nodes;i++)
 {
 printf("\n\n For router %d\n",i+1);
 for(j=0;j<nodes;j++)
 {
 printf("\t\nnode %d via %d Distance %d ",j+1,rt[i].from[j]+1,rt[i].dist[j]);
 }
 }
 printf("\n\n");
}
0 2 7
2 0 1
7 1 0

9
#include<iostream>
#include <time.h>
#include <cstdlib>
#include<ctime>
#include <unistd.h>
using namespace std;
class timer {
 private:
 unsigned long begTime;
 public:
 void start() {
 begTime = clock();
 }
unsigned long elapsedTime() {
 return ((unsigned long) clock() - begTime) / CLOCKS_PER_SEC;
 }
 bool isTimeout(unsigned long seconds) {
 return seconds >= elapsedTime();
 }
};
int main()
{
int frames[] = {1,2,3,4,5,6,7,8,9,10};
unsigned long seconds = 5;
srand(time(NULL));
timer t;
cout<<"Sender has to send frames : ";
for(int i=0;i<10;i++)
 cout<<frames[i]<<" ";
cout<<endl;
int count = 0;
bool delay = false;
cout<<endl<<"Sender\t\t\t\t\tReceiver"<<endl;
do
{
 bool timeout = false;
 cout<<"Sending Frame : "<<frames[count];
 cout.flush();
 cout<<"\t\t";
 t.start();
 if(rand()%2)
 {
 int to = 24600 + rand()%(64000 - 24600) + 1;
 for(int i=0;i<64000;i++)
 for(int j=0;j<to;j++) {}
 }
 if(t.elapsedTime() <= seconds)
 {
 cout<<"Received Frame : "<<frames[count]<<" ";
 if(delay)
 {
 cout<<"Duplicate";
 delay = false;
 }
 cout<<endl;
 count++;
 }
 else
 {
 cout<<"---"<<endl;
 cout<<"Timeout"<<endl;
 timeout = true;
 }
 t.start();
 if(rand()%2 || !timeout)
 {
 int to = 24600 + rand()%(64000 - 24600) + 1;
 for(int i=0;i<64000;i++)
 for(int j=0;j<to;j++) {}
 if(t.elapsedTime() > seconds )
 {
 cout<<"Delayed Ack"<<endl;
 count--;
 delay = true;
 }
 else if(!timeout)
 cout<<"Acknowledgement : "<<frames[count]-1<<endl;
 }
}while(count!=10);
return 0;
}

10
#include<stdio.h>
 #include<conio.h>
 
 int main(void)
{ 
int data[50],div[16],rem[16];
int datalen, divlen, i,j,k;
int ch;
printf("Enter the data: ");
i = 0;
while((ch = fgetc(stdin)) != '\n')
{
if(ch == '1')
data[i] = 1;
else 
data[i] = 0;
i++; 
} 
datalen = i; 
printf("\nEnter the divisor: ");
i = 0; 
while((ch = fgetc(stdin)) != '\n')
{
if(ch == '1')
div[i] = 1;
else
div[i] = 0;
i++;
}
divlen = i; 
for(i = datalen ; i < datalen + divlen - 1 ; i++)
data[i] = 0; 
datalen = datalen + divlen - 1; 
for(i = 0 ; i < divlen ; i++)
rem[i] = data[i];
k = divlen-1; 
while(k < datalen)
if(rem[0] == 1)
{
for(i = 0 ; i < divlen ; i++) 
rem[i] = rem[i] ^ div[i];
}
else
{
if(k == datalen-1)
break;
for(i = 0 ; i < divlen-1 ; i++) 
{
rem[i] = rem[i+1];
printf("%d",rem[i]);
} 
rem[i] = data[++k];
printf("%d\n",rem[i]);
}
j=1;
for(i = datalen - divlen + 1 ; i < datalen ; i++) 
{
data[i] = rem[j++];
}
printf("\nThe data to be sent is\n");
for(i = 0 ; i < datalen ; i++)
printf("%d",data[i]);
getch();
return 0;
}
OUTPUT: Enter the data: 10101111
Enter the divisor: 1011 
0011
0111
1111
1001
0100
1000
0110
The data to be sent is 10101111110

11
#include<stdio.h>

int main(){
    int incoming, outgoing, buck_size, n, store = 0;
    printf("Enter bucket size, outgoing rate and no of inputs: ");
    scanf("%d %d %d", &buck_size, &outgoing, &n);

    while (n != 0) {
        printf("Enter the incoming packet size : ");
        scanf("%d", &incoming);
        printf("Incoming packet size %d\n", incoming);
        if (incoming <= (buck_size - store)){
            store += incoming;
            printf("Bucket buffer size %d out of %d\n", store, buck_size);
        } else {
            printf("Dropped %d no of packets\n", incoming - (buck_size - store));
            printf("Bucket buffer size %d out of %d\n", store, buck_size);
            store = buck_size;
        }
        store = store - outgoing;
        printf("After outgoing %d packets left out of %d in buffer\n", store, buck_size);
        n--;
    }
}

